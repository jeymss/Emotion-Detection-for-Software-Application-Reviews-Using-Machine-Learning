# -*- coding: utf-8 -*-
"""Emotion Detection_Warriors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kl4XgNfhTiGjsGaSUbSTB97N8dHub6J-
"""

!pip install neattext

#Import
from tkinter import *
import neattext as nt 
import neattext.functions as nfx
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')

#from google.colab import drive
#drive.mount('/content/drive')

#Loading datasets COLLAB
#df = pd.read_csv("/content/drive/MyDrive/A.I/WARRIORSdataset - app reviews (1).csv", index_col=0)
#df.head

#Loading datasets
df = pd.read_csv("WARRIORSdataset - app reviews.csv", index_col=0)
df.head

df['Emotion'].value_counts()

#data cleaning
dir(nfx)

df['Cleancomment'] = df['Comment'].apply(nfx.remove_emojis)
df

df['Cleancomment'] = df['Comment'].apply(nfx.remove_stopwords)
df

#importing sklearn
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

Xfeatures = df['Cleancomment']
ylabels = df['Emotion']

#Data splitting
from sklearn.pipeline import Pipeline #converts the raw text dataset into a matrix of numbers 
pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),('lr',LogisticRegression())])

#Training and testing
X = df['Cleancomment']
y = df['Emotion']
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.4, random_state=0)
X

#fitting
pipe_lr.fit(X_train,y_train)

#Accuracy score
pipe_lr.score(X_test,y_test) *100

#Sample Prediction
#sample = input('Enter a comment: ')
#pipe_lr.predict([sample])

#Sample Prediction
#sample = input('Enter a comment: ')
#pipe_lr.predict([sample])

#Sample Prediction
#sample = input('Enter a comment: ')
#pipe_lr.predict([sample])

#Sample Prediction
#sample = input('Enter a comment: ')
#pipe_lr.predict([sample])

import tkinter as tk

import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Top level window
root= tk.Tk()
frame.title("Emotion Detection")
frame.geometry('400x200')

  
def printInput():
    inp = inputtxt.get(1.0, "end-1c")
    lbl.config(text = "Please input a comment: "+inp)
  
# TextBox Creation
inputtxt = tk.Text(frame,
                   height = 5,
                   width = 20)
  
inputtxt.pack()
  
# Button Creation
printButton = tk.Button(frame,
                        text = "Print", 
                        command = printInput)
printButton.pack()
  
# Label Creation
lbl = tk.Label(frame, text = "")
lbl.pack()
frame.mainloop()